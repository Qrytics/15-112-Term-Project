from cmu_112_graphics import *
import math, decimal
import _tkinter as tk
import random

def gameDimensions():
    winWidth = 700
    winHeight = 700
    return winWidth, winHeight

def appStarted(app):
    app.winWidth, app.winHeight = gameDimensions()
    app.caught = False
    app.win = False
    app.enemyFacing = 'Left'
    app.rows = 20
    app.cols = 20
    app.depth = 0
    app.orbCount = 7
    app.legalBound = 5
    app.orbsCollected = []
    app.wallColor = 'black'
    app.pathColor = 'gray'
    app.unknownColor = 'yellow'
    app.mapMargin = float(app.winHeight*0.3*(1/15))
    app.orbScale = int(abs(getCellBounds(app,0,0)[0]-getCellBounds(app,0,0)[2])/2.3)
    newGen(app)
    app.sprScaling = int(abs(getCellBounds(app,0,0)[0]-getCellBounds(app,0,0)[2])/2.3)
    app.sprCord = (app.sprXPix-app.sprScaling, app.sprYPix-app.sprScaling)
    app.sprPixMov = 3
    app.sprPixMovBackup = app.sprPixMov
    app.sprintMov = 5
    app.enemyMoveScale = 8
    cellLength(app)
    app.firPovColor = 'black'
    app.counter = 0
    app.xMove = 0
    app.yMove = 0
    app.rotate = 0
    app.rotateBool = 0
    app.turnDeg = 2
    app.spriteScale = 1/5
    app.enemySpriteScale = 1/5
    app.shadowScale = 1
    #Shadow download from https://pngtree.com/free-png-vectors/circle-shadow
    app.spriteShadowCircle = app.scaleImage(app.loadImage('blackBoard.png'), app.shadowScale)
    app.spriteShadowCircle = app.spriteShadowCircle.crop([1000, 950, 1280, 1250])
    #Sprite image assets were taken then edited from the game 'Undertale' by Toby Fox
    app.spriteSheet = app.scaleImage(app.loadImage('Sprite-Sheet-transformed-PhotoRoom.png'), app.spriteScale)
    #Enemy sprite image asset was taken from the game 'Lamentum' developed by "Obscure Tales"
    app.enemySpriteSheet = app.scaleImage(app.loadImage('EnemySprite.png'), app.enemySpriteScale)
    app.enemyLeft = app.enemySpriteSheet.crop([0,0,100,90])
    app.enemyRight = app.enemyLeft.transpose(Image.FLIP_LEFT_RIGHT)
    app.spriteWalkDown = app.spriteSheet.crop([0,0,30,42])
    app.spriteWalkRight = app.spriteSheet.crop([30,0,55,42])
    app.spriteWalkUp = app.spriteSheet.crop([55,0,90,42])
    app.spriteWalkLeft = app.spriteWalkRight.transpose(Image.FLIP_LEFT_RIGHT)
    app.spriteStillUp = app.spriteSheet.crop([120,0,160,42])
    app.spriteStillDown = app.spriteSheet.crop([0,43,30,100])
    app.spriteStillLeft = app.spriteSheet.crop([90,0,120,42])
    app.spriteStillRight = app.spriteStillLeft.transpose(Image.FLIP_LEFT_RIGHT)
    app.defaultSprite = 0
    app.walkBool = 0

# Written with help from https://medium.com/swlh/fun-with-python-1-maze-generator-931639b4fb7e
def mazeGen(app):
    app.board = []
    for row in range(app.rows): 
        tempBoard = []
        for col in range(app.cols): 
            if row == 0 or row == app.rows-1:
                tempBoard.append(app.wallColor)
            elif col == 0 or col == app.cols-1:
                tempBoard.append(app.wallColor)
            else:
                tempBoard.append(app.unknownColor)
        app.board.append(tempBoard)
    startRow = int(random.uniform(int(0.4*app.rows), int(0.8*app.rows)))
    startCol = int(random.uniform(int(0.35*app.cols), int(0.65*app.cols)))
    app.board[startRow][startCol] = app.pathColor
    walls = []
    walls.append([startRow, startCol+1])
    walls.append([startRow, startCol-1])
    walls.append([startRow+1, startCol])
    walls.append([startRow-1, startCol])
    app.board[startRow][startCol+1] = app.wallColor
    app.board[startRow][startCol-1] = app.wallColor
    app.board[startRow+1][startCol] = app.wallColor
    app.board[startRow-1][startCol] = app.wallColor
    while walls:
        app.depth += 1
        if app.depth > 2000: break
        randWallInt = int(random.uniform(0,len(walls)))
        if randWallInt == len(walls): randWallInt = len(walls)-1
        randWall = walls[randWallInt]
        if randWall[1] != 0:
            if app.board[randWall[0]][randWall[1]-1] == app.unknownColor and app.board[randWall[0]][randWall[1]+1] == app.pathColor:
                cells = checkBlanks(app, randWall)
                if cells < 2:
                    app.board[randWall[0]][randWall[1]] = app.pathColor
                    if (randWall[0] != 0):
                        if (app.board[randWall[0]-1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]-1][randWall[1]] = app.wallColor
                        if ([randWall[0]-1, randWall[1]] not in walls):
                            walls.append([randWall[0]-1, randWall[1]])
                        if (app.board[randWall[0]+1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]+1][randWall[1]] = app.wallColor
                        if ([randWall[0]+1, randWall[1]] not in walls):
                            walls.append([randWall[0]+1, randWall[1]])
                        if (app.board[randWall[0]][randWall[1]+1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]+1] = app.wallColor
                        if ([randWall[0], randWall[1]+1] not in walls):
                            walls.append([randWall[0], randWall[1]+1])
                        if (app.board[randWall[0]][randWall[1]-1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]-1] = app.wallColor
                        if ([randWall[0], randWall[1]-1] not in walls):
                            walls.append([randWall[0], randWall[1]-1])
                    trashWall(walls, randWall)
        if randWall[0] != 0:
            if app.board[randWall[0]-1][randWall[1]] == app.unknownColor and app.board[randWall[0]+1][randWall[1]+1] == app.pathColor:
                cells = checkBlanks(app, randWall)
                if cells < 2:
                    app.board[randWall[0]][randWall[1]] = app.pathColor
                    if (randWall[0] != 0):
                        if (app.board[randWall[0]-1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]-1][randWall[1]] = app.wallColor
                        if ([randWall[0]-1, randWall[1]] not in walls):
                            walls.append([randWall[0]-1, randWall[1]])
                        if (app.board[randWall[0]+1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]+1][randWall[1]] = app.wallColor
                        if ([randWall[0]+1, randWall[1]] not in walls):
                            walls.append([randWall[0]+1, randWall[1]])
                        if (app.board[randWall[0]][randWall[1]+1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]+1] = app.wallColor
                        if ([randWall[0], randWall[1]+1] not in walls):
                            walls.append([randWall[0], randWall[1]+1])
                        if (app.board[randWall[0]][randWall[1]-1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]-1] = app.wallColor
                        if ([randWall[0], randWall[1]-1] not in walls):
                            walls.append([randWall[0], randWall[1]-1])
                    trashWall(walls, randWall)
        if randWall[0] != app.rows-1:
            if app.board[randWall[0]+1][randWall[1]] == app.unknownColor and app.board[randWall[0]-1][randWall[1]] == app.pathColor:
                cells = checkBlanks(app, randWall)
                if cells < 2:
                    app.board[randWall[0]][randWall[1]] = app.pathColor
                    if (randWall[0] != 0):
                        if (app.board[randWall[0]-1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]-1][randWall[1]] = app.wallColor
                        if ([randWall[0]-1, randWall[1]] not in walls):
                            walls.append([randWall[0]-1, randWall[1]])
                        if (app.board[randWall[0]+1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]+1][randWall[1]] = app.wallColor
                        if ([randWall[0]+1, randWall[1]] not in walls):
                            walls.append([randWall[0]+1, randWall[1]])
                        if (app.board[randWall[0]][randWall[1]+1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]+1] = app.wallColor
                        if ([randWall[0], randWall[1]+1] not in walls):
                            walls.append([randWall[0], randWall[1]+1])
                        if (app.board[randWall[0]][randWall[1]-1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]-1] = app.wallColor
                        if ([randWall[0], randWall[1]-1] not in walls):
                            walls.append([randWall[0], randWall[1]-1])
                    trashWall(walls, randWall)
        if randWall[1] != app.cols-1:
            if app.board[randWall[0]][randWall[1]+1] == app.unknownColor and app.board[randWall[0]][randWall[1]-1] == app.pathColor:
                cells = checkBlanks(app, randWall)
                if cells < 2:
                    app.board[randWall[0]][randWall[1]] = app.pathColor
                    if (randWall[0] != 0):
                        if (app.board[randWall[0]-1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]-1][randWall[1]] = app.wallColor
                        if ([randWall[0]-1, randWall[1]] not in walls):
                            walls.append([randWall[0]-1, randWall[1]])
                        if (app.board[randWall[0]+1][randWall[1]] != app.pathColor):
                            app.board[randWall[0]+1][randWall[1]] = app.wallColor
                        if ([randWall[0]+1, randWall[1]] not in walls):
                            walls.append([randWall[0]+1, randWall[1]])
                        if (app.board[randWall[0]][randWall[1]+1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]+1] = app.wallColor
                        if ([randWall[0], randWall[1]+1] not in walls):
                            walls.append([randWall[0], randWall[1]+1])
                        if (app.board[randWall[0]][randWall[1]-1] != app.pathColor):
                            app.board[randWall[0]][randWall[1]-1] = app.wallColor
                        if ([randWall[0], randWall[1]-1] not in walls):
                            walls.append([randWall[0], randWall[1]-1])
                    trashWall(walls, randWall)
        continue       
    for row in range(app.rows):
        for col in range(app.cols):
            if app.board[row][col] == app.unknownColor:
                app.board[row][col] = app.wallColor 
    spawnOrbs(app)
    randInt = int(random.uniform(0,len(app.possLocationsCell)-1))
    coords = getCellBounds(app, app.possLocationsCell[randInt][0], app.possLocationsCell[randInt][1])
    app.sprXPix = coords[0] + int(abs(getCellBounds(app,0,0)[0]-getCellBounds(app,0,0)[2]))
    app.sprYPix = coords[1] + int(abs(getCellBounds(app,0,0)[0]-getCellBounds(app,0,0)[2])/2)

    #Help from https://medium.com/swlh/fun-with-python-1-maze-generator-931639b4fb7e
def checkBlanks(app, randWall):
    cells = 0
    if (app.board[randWall[0]-1][randWall[1]] == app.pathColor): cells += 1
    if (app.board[randWall[0]+1][randWall[1]] == app.pathColor): cells += 1
    if (app.board[randWall[0]][randWall[1]-1] == app.pathColor): cells += 1
    if (app.board[randWall[0]][randWall[1]+1] == app.pathColor): cells += 1
    return cells

#Help from https://medium.com/swlh/fun-with-python-1-maze-generator-931639b4fb7e
def trashWall(walls, randWall):
    for wall in walls:
        if (wall[0] == randWall[0] and wall[1] == randWall[1]):
            walls.remove(wall)

def spriteChange(app):
    app.walkBool = 1-app.walkBool    

def checkOrbProximity(app):
    for orb in app.orbLocations:
        if abs(app.sprXPix-15-(orb[0]+app.orbScale/2)) <= 10 and abs(app.sprYPix-(orb[1]+app.orbScale/2)) <= 10:
            app.orbLocations.remove(orb)
            app.orbsCollected.append(orb)
    if len(app.orbsCollected) == app.orbCount: app.win = True

def spawnOrbs(app):
    app.orbLocations = []
    app.orbLocationsCell = []
    app.possLocationsXY = []
    app.possLocationsCell = []
    app.cornerCells = []
    for row in range(app.rows):
        for col in range(app.cols):
            wallCount = 0
            if app.board[row][col] == app.pathColor:
                if app.board[row-1][col] == app.wallColor: wallCount += 1
                if app.board[row+1][col] == app.wallColor: wallCount += 1
                if app.board[row][col+1] == app.wallColor: wallCount += 1
                if app.board[row][col-1] == app.wallColor: wallCount += 1
                if wallCount == 3: 
                    location = getCellBounds(app, row, col)
                    locationCell = (row, col)
                    app.possLocationsXY.append((location[0]+int(abs(getCellBounds(app,0,0)[0]-getCellBounds(app,0,0)[2])/3.33), 
                        location[1]+int(abs(getCellBounds(app,0,0)[0]-getCellBounds(app,0,0)[2])/3.33)))
                    app.possLocationsCell.append(locationCell)
                    app.cornerCells.append(locationCell)
                    location = 0
                    locationCell = 0
    if len(app.possLocationsXY) <= app.orbCount*4:
        newGen(app)
    else:
        for count in range(app.orbCount):
            randInt = int(random.uniform(0,len(app.possLocationsXY)-1))
            app.orbLocations.append(app.possLocationsXY[randInt])
            app.orbLocationsCell.append(app.possLocationsCell[randInt])
            app.possLocationsXY.pop(randInt)
            app.possLocationsCell.pop(randInt)

def newGen(app):
    app.sprintCooldown = 60
    app.currentSprintCooldown = 0
    app.maxStamina = 10
    app.stamina = app.maxStamina
    app.sprintStop = True
    app.gameStartBool = True
    app.enemyBlink = 0
    app.enemyBlinkBool = False
    app.enemyBlinkDuration = 0
    app.minuteTimer = 0
    app.secondTimer = 0
    app.timer = 0
    app.enemyHiddenCounter = 0
    app.enemyHiddenMad = 0
    app.joke = 0
    app.enemyHidden = True
    app.win = False
    app.caugth = False
    app.depth = 0
    app.orbLocations = []
    app.possLocationsXY = []
    app.possLocationsCell = []
    app.orbsCollected = []
    mazeGen(app)
    getPathCells(app)
    spawnHiddenEnemy(app)
    getWallCells(app)

def timerFired(app):
    if app.rotateBool == 1:
        app.rotate -= app.turnDeg
    elif app.rotateBool == -1:
        app.rotate += app.turnDeg
    spriteChange(app)
    moveSpr(app)
    checkOrbProximity(app)
    playerMoveLegal(app)
    gameStartTimer(app)
    if not app.win: 
        if not app.caught: 
            sprintMechanic(app)
            if app.currentSprintCooldown > 0:
                app.currentSprintCooldown -= 1
            app.enemyBlink += 1
            if app.enemyBlink >= 75:
                app.enemyBlinkBool = True
                app.enemyBlink = 0
            if app.enemyBlinkBool:
                app.enemyBlinkDuration += 1
                if app.enemyBlinkDuration >= 7:
                    app.enemyBlinkDuration = 0
                    app.enemyBlinkBool = False
            app.secondTimer += 1
            if app.secondTimer >= 8:
                app.timer += 1
                if app.timer == 60:
                    app.minuteTimer += 1
                    app.timer = 0
                app.secondTimer = 0
        if app.enemyHidden == False: 
            moveEnemy(app)
            checkPlayerCaught(app)
        else: 
            checkEnemyFound(app)
            app.enemyHiddenCounter += 1
            app.enemyHiddenMad += 1
            if app.enemyHiddenCounter >= 100:
                app.enemyHiddenBool = False
                spawnHiddenEnemy(app)
                app.enemyHiddenCounter = 0
                app.enemyBlink = 0
            if app.enemyHiddenMad >= 220:
                app.enemyHiddenMad = 0
                app.enemyHidden = False
    else: 
        app.joke += 1

def playerMoveLegal(app): 
    xVal = -app.legalBound
    yVal = -app.legalBound
    for xAxis in range(2):
        for yAxis in range(2):
            if checkIfWall(app, app.sprXPix-15+xVal, app.sprYPix+yVal):
                if app.xMove == -1: 
                    app.sprXPix += app.sprPixMov
                elif app.xMove == 1:
                    app.sprXPix += -app.sprPixMov
                if app.yMove == -1:
                    app.sprYPix += -app.sprPixMov
                elif app.yMove == 1:
                    app.sprYPix += app.sprPixMov
            yVal = app.legalBound
        xVal = app.legalBound
        yVal = -app.legalBound

def sprintMechanic(app):
    if not app.sprintStop and app.stamina > 0 and app.currentSprintCooldown == 0:
        app.sprPixMov = app.sprintMov
        app.stamina -= 1
    elif app.stamina == 0 and not app.sprintStop:
        app.currentSprintCooldown = app.sprintCooldown
        app.sprPixMov = app.sprPixMovBackup
    else: 
        app.sprPixMov = app.sprPixMovBackup
        if app.stamina >= 0 and app.stamina < app.maxStamina:
            if app.currentSprintCooldown != 0:
                app.stamina += float(app.maxStamina/app.sprintCooldown)
                if app.stamina > app.maxStamina: app.stamina = app.maxStamina
            else: 
                app.stamina += 1
                if app.stamina > app.maxStamina: app.stamina = app.maxStamina

def cellLength(app):
    x0,y0,x1,y1 = getCellBounds(app, 0, 0)
    app.cellLength = x1-x0

def checkPlayerCaught(app):
    if abs(app.sprXPix - app.enemyX) <= 27 and abs(app.sprYPix - app.enemyY) <= 27:
        app.caught = True
        app.gameStartBool = False
    else: 
        app.caught = False
        app.enemyCounter += 1
        if app.enemyCounter >= 100:
            app.enemyHidden = True
            app.enemyHiddenMad = 0
            app.enemyHiddenCounter = 0
            spawnHiddenEnemy(app)

def checkEnemyFound(app):
    playerCell = getCell(app, app.sprXPix, app.sprYPix)
    checkUp = (playerCell[0]+1, playerCell[1])
    checkDown = (playerCell[0]-1, playerCell[1])
    checkLeft = (playerCell[0], playerCell[1]-1)
    checkRight = (playerCell[0], playerCell[1]+1)
    checklist = [checkUp, checkDown, checkLeft, checkRight]
    if getCell(app, app.enemyX, app.enemyY) in checklist: 
        app.enemyCounter += 1
        app.enemyBlinkBool = True
    else: app.enemyCounter = 0
    if app.enemyCounter >= 7:
        moveEnemy(app)
        app.enemyHidden = False
        
def spawnHiddenEnemy(app):
    spawnEnemy(app)
    enemyHideOrientation(app)

def spawnEnemy(app):
    getPossibleEnemySpawn(app)
    randInt = int(random.uniform(0,len(app.possibleEnemy)))
    if randInt == len(app.possibleEnemy): randInt -= 1
    cell = app.possibleEnemy[randInt]
    x0, y0, x1, y1 = getCellBounds(app, cell[0], cell[1])
    app.enemyX = (x0 + x1)/2
    app.enemyY = (y0 + y1)/2

def getPossibleEnemySpawn(app):
    app.possibleEnemy = []
    for path in app.pathCellCoords:
        if path in app.orbLocationsCell: continue
        if path in getCellsNearPlayer(app, 3): continue
        if path in getCellsNearPlayer(app, 5):
            app.possibleEnemy.append(path)

def getCellsNearPlayer(app, count):
    cells = []
    playerCellRow, playerCellCol = getCell(app, app.sprXPix, app.sprYPix)
    num = int((count-1)/2)
    cornerCellRow = playerCellRow-num
    cornerCellCol = playerCellCol-num
    for row in range(count):
        if cornerCellRow+row < 0 or cornerCellRow+row > app.rows: continue
        for col in range(count):
            if cornerCellCol+col < 0 or cornerCellCol+col > app.cols: continue
            cells.append((cornerCellRow+row,cornerCellCol+col))
    return cells

def moveEnemy(app):
    enemyCell = getCell(app, app.enemyX, app.enemyY)
    pathFound = enemyPathfind(app, enemyCell[0], enemyCell[1], 0, 0, [])
    if pathFound == None: pathFound = app.pathFound
    elif enemyCell in pathFound:
        for count in range(len(pathFound)):
            pathFound.pop(count)
            if pathFound[count] == enemyCell:
                pathFound.pop(count)
                break
        if pathFound != None: app.pathFound = pathFound
    elif len(pathFound) == 0: pathFound.append(enemyCell)
    rowDiff = pathFound[0][0] - enemyCell[0]
    colDiff = pathFound[0][1] - enemyCell[1]
    rowSum = 0
    colSum = 0
    if rowDiff == 1: rowSum = app.cellLength/app.enemyMoveScale
    if rowDiff == -1: rowSum = -app.cellLength/app.enemyMoveScale
    if colDiff == 1: 
        colSum = app.cellLength/app.enemyMoveScale
        app.enemyFacing = 'Right'
    if colDiff == -1: 
        colSum = -app.cellLength/app.enemyMoveScale
        app.enemyFacing = 'Left'
    app.enemyX += colSum
    app.enemyY += rowSum

def enemyPathfind(app, row, col, prevRow, prevCol, pathFound=[]):
    if (row,col) == getCell(app, app.sprXPix-15, app.sprYPix): 
        return pathFound
    elif (row,col) in app.cornerCells: 
        if (row,col) == getCell(app, app.enemyX, app.enemyY):
            pass
        else: return None
    prevRow = row
    prevCol = col
    for xAxis in (-1,0,1):
        if row+xAxis < 0 or row+xAxis > app.rows: continue
        for yAxis in (-1,0,1):
            if (xAxis,yAxis) in [(-1,-1),(1,1),(1,-1),(-1,1),(0,0)]: continue
            if col+yAxis < 0 or col+yAxis > app.cols: continue
            if app.board[row+xAxis][col+yAxis] != app.pathColor: continue
            if (row+xAxis,col+yAxis) in pathFound: continue
            pathFound.append((row+xAxis,col+yAxis))
            result = enemyPathfind(app, row+xAxis, col+yAxis, prevRow, prevCol, pathFound)
            if result != None: 
                return result
            row,col = prevRow,prevCol
            pathFound.pop()
    return None

def enemyHideOrientation(app):
    app.hideOrientation = int(random.uniform(0,4))
    if app.hideOrientation == 4: app.hideOrientation = 3

def gameStartTimer(app):
    if app.timer >= 10 and app.gameStartBool:
        app.gameStartBool = False

def getCell(app, x, y):
    for row in range(app.rows):
        for col in range(app.cols):
            x0, y0, x1, y1 = getCellBounds(app, row, col)
            if x0 <= x <= x1 and y0 <= y <= y1:
                return (row,col)

def drawCell(app, canvas, row, col, color):
    x0, y0, x1, y1 = getCellBounds(app, row, col)
    canvas.create_rectangle(x0, y0, x1, y1, fill=color)

def drawBoard(app, canvas):
    canvas.create_rectangle(0, 0, app.winWidth, app.winHeight, fill=app.firPovColor)
    cellsNear = getCellsNearPlayer(app, 5)
    for i in range(app.rows):
        for j in range(app.cols):
            if (i,j) in cellsNear:
                canvas.create_rectangle(getCellBounds(app, i, j), fill=app.board[i][j])

#https://www.cs.cmu.edu/~112/notes/notes-animations-part2.html
def getCellBounds(app, row, col):
    gridHeight = app.winHeight - 2*app.mapMargin
    gridWidth  = gridHeight 
    cellWidth = gridWidth / app.cols
    cellHeight = gridHeight / app.rows
    x0 = app.mapMargin + col * cellWidth
    x1 = app.mapMargin + (col+1) * cellWidth
    y0 = app.mapMargin + row * cellHeight
    y1 = app.mapMargin + (row+1) * cellHeight
    return (x0, y0, x1, y1)

def moveSpr(app):
    #Up, Down, Left, Right
    if app.xMove == 1:
        app.sprXPix += app.sprPixMov*math.cos(app.rotate/(2*math.pi))
        app.sprYPix -= app.sprPixMov*math.sin(app.rotate/(2*math.pi))
    elif app.xMove == -1:
        app.sprXPix -= app.sprPixMov*math.cos(app.rotate/(2*math.pi))
        app.sprYPix += app.sprPixMov*math.sin(app.rotate/(2*math.pi))
    if app.yMove == 1:
        app.sprYPix -= app.sprPixMov*math.cos(app.rotate/(2*math.pi))
        app.sprXPix += app.sprPixMov*math.sin(app.rotate/(2*math.pi))
    elif app.yMove == -1:
        app.sprYPix += app.sprPixMov*math.cos(app.rotate/(2*math.pi))
        app.sprXPix -= app.sprPixMov*math.sin(app.rotate/(2*math.pi))
    #Body of protagonist
    (x, y) = app.sprCord
    x = app.sprXPix - app.sprScaling
    y = app.sprYPix - app.sprScaling
    app.sprCord = (x, y)

def getWallCells(app): 
    app.wallCellCoords = []
    for row in range(app.rows):
        for col in range(app.cols):
            if app.board[row][col] == app.wallColor:
                app.wallCellCoords.append((row,col))

def getPathCells(app):
    app.pathCellCoords = []
    for row in range(app.rows):
        for col in range(app.cols):
            if app.board[row][col] == app.pathColor:
                app.pathCellCoords.append((row,col))

def checkIfWall(app, x, y): 
    for coord in app.wallCellCoords:
        x0, y0, x1, y1 = getCellBounds(app, coord[0], coord[1])
        if x0 <= x <= x1 and y0 <= y <= y1:
            return True
    return False

def drawSpr(app,canvas):
    if app.yMove == -1:
        if app.walkBool == 0:
            canvas.create_image(app.sprCord[0],app.sprCord[1]-3,image=ImageTk.PhotoImage(app.spriteWalkDown))
        else:
            canvas.create_image(app.sprCord[0],app.sprCord[1]+6,image=ImageTk.PhotoImage(app.spriteStillDown))
    elif app.yMove == 1:
        if app.walkBool == 0:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteWalkUp))
        else:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteStillUp))
    elif app.xMove == 1:
        if app.walkBool == 0:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteWalkRight))
        else:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteStillRight))
    elif app.xMove == -1:
        if app.walkBool == 0:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteWalkLeft))
        else:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteStillLeft))
    else: 
        if app.defaultSprite == 0:
            canvas.create_image(app.sprCord[0],app.sprCord[1]+6,image=ImageTk.PhotoImage(app.spriteStillDown))
        elif app.defaultSprite == 1:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteStillUp))
        elif app.defaultSprite == 2:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteStillRight))
        elif app.defaultSprite == 3:
            canvas.create_image(app.sprCord[0],app.sprCord[1],image=ImageTk.PhotoImage(app.spriteStillLeft))
    
def drawOrb(app,canvas):
    cellsNear = getCellsNearPlayer(app, 4)
    for cord in app.orbLocations:
        if cord not in app.orbsCollected:
            canvas.create_oval(cord[0],cord[1], cord[0]+app.orbScale, cord[1]+app.orbScale, fill='spring green')

def drawEnemy(app,canvas):
    if app.enemyHidden == True:
        if app.hideOrientation == 0:
            canvas.create_rectangle(app.enemyX+2, app.enemyY-10, app.enemyX+12, app.enemyY+10, fill='red')
        elif app.hideOrientation == 1:
            canvas.create_rectangle(app.enemyX-12, app.enemyY-10, app.enemyX-1, app.enemyY+10, fill='red')
        elif app.hideOrientation == 2:
            canvas.create_rectangle(app.enemyX-10, app.enemyY+1, app.enemyX+10, app.enemyY+12, fill='red')
        elif app.hideOrientation == 3:
            canvas.create_rectangle(app.enemyX-10, app.enemyY-12, app.enemyX+10, app.enemyY-1, fill='red')
    else:
        if app.enemyFacing == 'Left':
            canvas.create_image(app.enemyX-12,app.enemyY-35,image=ImageTk.PhotoImage(app.enemyLeft))
        else: 
            canvas.create_image(app.enemyX-12,app.enemyY-35,image=ImageTk.PhotoImage(app.enemyRight))

def drawSpriteShadow(app,canvas):
    canvas.create_image(app.sprXPix-20,app.sprYPix-15,image=ImageTk.PhotoImage(app.spriteShadowCircle))

def drawOrbCounter(app, canvas):
    orbs = len(app.orbsCollected)
    if app.win: 
        if app.joke >= 30: 
            canvas.create_text(350, 650, text='there\'s nothing left, that\'s it', fill="white", font=('Times', 20, 'bold', 'italic'))
        else: canvas.create_text(350, 650, text='Congrats. You won, now what...', fill="white", font=('Times', 20, 'bold', 'italic'))
    else: 
        canvas.create_text(350, 650, text=f"{orbs}/{app.orbCount} Orbs left to Collect...", fill="white", font=('Times', 20, 'bold', 'italic'))

def drawCaughtSign(app,canvas):
    if app.caught:
        canvas.create_text(350, 75, text="You've been caught, press 'n' to restart", fill="white", font=('Times', 20, 'bold', 'italic'))

def drawTimer(app, canvas):
    canvas.create_text(100, 653, text=f"{app.minuteTimer}:{app.timer}", fill="white", font=('Times', 18, 'bold'))

def drawInstructions(app, canvas):
    canvas.create_text(350, 75, text="WASD: Move - Space: Sprint - don't get caught...", fill="white", font=('Times', 20, 'bold', 'italic'))

def drawSprint(app, canvas):
    canvas.create_text(580, 650, text=f"Stamina:", fill="white", font=('Times', 16, 'bold'))
    canvas.create_text(640, 650, text=f"{int((app.stamina/app.maxStamina)*100)}", fill="white", font=('Times', 16, 'bold'))

def keyPressed(app, event):
    if app.caught == True: 
        pass
    else:
        if event.key == 'd':
            if app.xMove in (0,-1):
                app.xMove += 1
        if event.key == 'a':
            if app.xMove in (0,1):
                app.xMove += -1
        if event.key == 's':
            if app.yMove in (0,1):
                app.yMove += -1
        if event.key == 'w':
            if app.yMove in (-1,0):
                app.yMove += 1
        if event.key == 'Space':
            if app.sprintStop:
                app.sprintStop = False
                
    if event.key == 'n':
        newGen(app)
        app.caught = False
        
def keyReleased(app, event):
    if event.key == 'd':
        if app.xMove == 1:
            app.xMove += -1
        app.defaultSprite = 2
    if event.key == 'a':
        if app.xMove == -1:
            app.xMove += 1
        app.defaultSprite = 3
    if event.key == 's':
        if app.yMove == -1:
            app.yMove += 1
        app.defaultSprite = 0
    if event.key == 'w':
        if app.yMove == 1:
            app.yMove += -1
        app.defaultSprite = 1
    if event.key == 'Space':
        app.sprPixMov = app.sprPixMovBackup
        app.sprintStop = True

def redrawAll(app, canvas):
    drawBoard(app, canvas)
    drawSpriteShadow(app, canvas)
    drawOrb(app, canvas)
    drawSpr(app, canvas)
    if app.enemyHidden != True or app.enemyBlinkBool:
        drawEnemy(app, canvas)
    drawOrbCounter(app, canvas)
    drawCaughtSign(app, canvas)
    drawTimer(app, canvas)
    if app.gameStartBool:
        drawInstructions(app, canvas)
    drawSprint(app, canvas)

def playGame():
    winWidth, winHeight = gameDimensions()
    runApp(width=winWidth, height=winHeight)

playGame()
